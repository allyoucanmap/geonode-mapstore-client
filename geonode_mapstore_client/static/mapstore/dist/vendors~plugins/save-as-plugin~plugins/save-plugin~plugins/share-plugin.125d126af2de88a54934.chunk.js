(window.webpackJsonp=window.webpackJsonp||[]).push([["vendors~plugins/save-as-plugin~plugins/save-plugin~plugins/share-plugin"],{"./node_modules/@turf/bbox-polygon/main.es.js":function(e,t,r){"use strict";var n=r("./node_modules/@turf/helpers/main.es.js");t.a=function(e){Object(n.l)(e);var t=Number(e[0]),r=Number(e[1]),o=Number(e[2]),i=Number(e[3]);if(6===e.length)throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");var a=[t,r],s=[t,i],u=[o,i],c=[o,r];return Object(n.i)([[a,c,u,s,a]])}},"./node_modules/@turf/boolean-contains/main.es.js":function(e,t,r){"use strict";var n=r("./node_modules/@turf/invariant/main.es.js");function o(e,t,r){var n=!1;t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1]&&(t=t.slice(0,t.length-1));for(var o=0,i=t.length-1;o<t.length;i=o++){var a=t[o][0],s=t[o][1],u=t[i][0],c=t[i][1];if(e[1]*(a-u)+s*(u-e[0])+c*(e[0]-a)==0&&(a-e[0])*(u-e[0])<=0&&(s-e[1])*(c-e[1])<=0)return!r;s>e[1]!=c>e[1]&&e[0]<(u-a)*(e[1]-s)/(c-s)+a&&(n=!n)}return n}var i=function(e,t,r){if("object"!=typeof(r=r||{}))throw new Error("options is invalid");var i=r.ignoreBoundary;if(!e)throw new Error("point is required");if(!t)throw new Error("polygon is required");var a=Object(n.a)(e),s=Object(n.b)(t),u=t.geometry?t.geometry.type:t.type,c=t.bbox;if(c&&!1===function(e,t){return t[0]<=e[0]&&t[1]<=e[1]&&t[2]>=e[0]&&t[3]>=e[1]}(a,c))return!1;"Polygon"===u&&(s=[s]);for(var h=0,l=!1;h<s.length&&!l;h++)if(o(a,s[h][0],i)){for(var f=!1,d=1;d<s[h].length&&!f;)o(a,s[h][d],!i)&&(f=!0),d++;f||(l=!0)}return l},a=r("./node_modules/@turf/meta/main.es.js");var s=function(e){var t=[1/0,1/0,-1/0,-1/0];return Object(a.b)(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t},u=r("./node_modules/@turf/boolean-point-on-line/main.es.js");function c(e,t){return!(e[0]>t[0])&&(!(e[2]<t[2])&&(!(e[1]>t[1])&&!(e[3]<t[3])))}function h(e,t){return e[0]===t[0]&&e[1]===t[1]}t.a=function(e,t){var r=Object(n.d)(e),o=Object(n.d)(t),a=Object(n.c)(e),l=Object(n.c)(t),f=Object(n.b)(e),d=Object(n.b)(t);switch(r){case"Point":switch(o){case"Point":return h(f,d);default:throw new Error("feature2 "+o+" geometry not supported")}case"MultiPoint":switch(o){case"Point":return function(e,t){var r,n=!1;for(r=0;r<e.coordinates.length;r++)if(h(e.coordinates[r],t.coordinates)){n=!0;break}return n}(a,l);case"MultiPoint":return function(e,t){for(var r=0;r<t.coordinates.length;r++){for(var n=!1,o=0;o<e.coordinates.length;o++)if(h(t.coordinates[r],e.coordinates[o])){n=!0;break}if(!n)return!1}return!0}(a,l);default:throw new Error("feature2 "+o+" geometry not supported")}case"LineString":switch(o){case"Point":return Object(u.a)(l,a,{ignoreEndVertices:!0});case"LineString":return function(e,t){for(var r=!1,n=0;n<t.coordinates.length;n++)if(Object(u.a)({type:"Point",coordinates:t.coordinates[n]},e,{ignoreEndVertices:!0})&&(r=!0),!Object(u.a)({type:"Point",coordinates:t.coordinates[n]},e,{ignoreEndVertices:!1}))return!1;return r}(a,l);case"MultiPoint":return function(e,t){for(var r=!1,n=0;n<t.coordinates.length;n++)if(Object(u.a)(t.coordinates[n],e,{ignoreEndVertices:!0})&&(r=!0),!Object(u.a)(t.coordinates[n],e))return!1;if(r)return!0;return!1}(a,l);default:throw new Error("feature2 "+o+" geometry not supported")}case"Polygon":switch(o){case"Point":return i(l,a,{ignoreBoundary:!0});case"LineString":return function(e,t){var r=!1,n=0,o=s(e),a=s(t);if(!c(o,a))return!1;for(;n<t.coordinates.length-1;n++){var u=(h=t.coordinates[n],l=t.coordinates[n+1],[(h[0]+l[0])/2,(h[1]+l[1])/2]);if(i({type:"Point",coordinates:u},e,{ignoreBoundary:!0})){r=!0;break}}var h,l;return r}(a,l);case"Polygon":return function(e,t){var r=s(e),n=s(t);if(!c(r,n))return!1;for(var o=0;o<t.coordinates[0].length;o++)if(!i(t.coordinates[0][o],e))return!1;return!0}(a,l);case"MultiPoint":return function(e,t){for(var r=0;r<t.coordinates.length;r++)if(!i(t.coordinates[r],e,{ignoreBoundary:!0}))return!1;return!0}(a,l);default:throw new Error("feature2 "+o+" geometry not supported")}default:throw new Error("feature1 "+r+" geometry not supported")}}},"./node_modules/@turf/boolean-overlap/main.es.js":function(e,t,r){"use strict";var n=r("./node_modules/@turf/meta/main.es.js"),o=r("./node_modules/@turf/invariant/main.es.js");function i(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function a(e,t){return e<t?-1:e>t?1:0}var s=function(e,t,r,n,o){!function e(t,r,n,o,a){for(;o>n;){if(o-n>600){var s=o-n+1,u=r-n+1,c=Math.log(s),h=.5*Math.exp(2*c/3),l=.5*Math.sqrt(c*h*(s-h)/s)*(u-s/2<0?-1:1),f=Math.max(n,Math.floor(r-u*h/s+l)),d=Math.min(o,Math.floor(r+(s-u)*h/s+l));e(t,r,f,d,a)}var m=t[r],p=n,g=o;for(i(t,n,r),a(t[o],m)>0&&i(t,n,o);p<g;){for(i(t,p,g),p++,g--;a(t[p],m)<0;)p++;for(;a(t[g],m)>0;)g--}0===a(t[n],m)?i(t,n,g):(g++,i(t,g,o)),g<=r&&(n=g+1),r<=g&&(o=g-1)}}(e,t,r||0,n||e.length-1,o||a)};function u(e,t){if(!(this instanceof u))return new u(e,t);this._maxEntries=Math.max(4,e||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),t&&this._initFormat(t),this.clear()}function c(e,t,r){if(!r)return t.indexOf(e);for(var n=0;n<t.length;n++)if(r(e,t[n]))return n;return-1}function h(e,t){l(e,0,e.children.length,t,e)}function l(e,t,r,n,o){o||(o=b(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var i,a=t;a<r;a++)i=e.children[a],f(o,e.leaf?n(i):i);return o}function f(e,t){return e.minX=Math.min(e.minX,t.minX),e.minY=Math.min(e.minY,t.minY),e.maxX=Math.max(e.maxX,t.maxX),e.maxY=Math.max(e.maxY,t.maxY),e}function d(e,t){return e.minX-t.minX}function m(e,t){return e.minY-t.minY}function p(e){return(e.maxX-e.minX)*(e.maxY-e.minY)}function g(e){return e.maxX-e.minX+(e.maxY-e.minY)}function y(e,t){return e.minX<=t.minX&&e.minY<=t.minY&&t.maxX<=e.maxX&&t.maxY<=e.maxY}function w(e,t){return t.minX<=e.maxX&&t.minY<=e.maxY&&t.maxX>=e.minX&&t.maxY>=e.minY}function b(e){return{children:e,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function v(e,t,r,n,o){for(var i,a=[t,r];a.length;)(r=a.pop())-(t=a.pop())<=n||(i=t+Math.ceil((r-t)/n/2)*n,s(e,i,t,r,o),a.push(t,i,i,r))}u.prototype={all:function(){return this._all(this.data,[])},search:function(e){var t=this.data,r=[],n=this.toBBox;if(!w(e,t))return r;for(var o,i,a,s,u=[];t;){for(o=0,i=t.children.length;o<i;o++)a=t.children[o],w(e,s=t.leaf?n(a):a)&&(t.leaf?r.push(a):y(e,s)?this._all(a,r):u.push(a));t=u.pop()}return r},collides:function(e){var t=this.data,r=this.toBBox;if(!w(e,t))return!1;for(var n,o,i,a,s=[];t;){for(n=0,o=t.children.length;n<o;n++)if(i=t.children[n],w(e,a=t.leaf?r(i):i)){if(t.leaf||y(e,a))return!0;s.push(i)}t=s.pop()}return!1},load:function(e){if(!e||!e.length)return this;if(e.length<this._minEntries){for(var t=0,r=e.length;t<r;t++)this.insert(e[t]);return this}var n=this._build(e.slice(),0,e.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var o=this.data;this.data=n,n=o}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},insert:function(e){return e&&this._insert(e,this.data.height-1),this},clear:function(){return this.data=b([]),this},remove:function(e,t){if(!e)return this;for(var r,n,o,i,a=this.data,s=this.toBBox(e),u=[],h=[];a||u.length;){if(a||(a=u.pop(),n=u[u.length-1],r=h.pop(),i=!0),a.leaf&&-1!==(o=c(e,a.children,t)))return a.children.splice(o,1),u.push(a),this._condense(u),this;i||a.leaf||!y(a,s)?n?(r++,a=n.children[r],i=!1):a=null:(u.push(a),h.push(r),r=0,n=a,a=a.children[0])}return this},toBBox:function(e){return e},compareMinX:d,compareMinY:m,toJSON:function(){return this.data},fromJSON:function(e){return this.data=e,this},_all:function(e,t){for(var r=[];e;)e.leaf?t.push.apply(t,e.children):r.push.apply(r,e.children),e=r.pop();return t},_build:function(e,t,r,n){var o,i=r-t+1,a=this._maxEntries;if(i<=a)return h(o=b(e.slice(t,r+1)),this.toBBox),o;n||(n=Math.ceil(Math.log(i)/Math.log(a)),a=Math.ceil(i/Math.pow(a,n-1))),(o=b([])).leaf=!1,o.height=n;var s,u,c,l,f=Math.ceil(i/a),d=f*Math.ceil(Math.sqrt(a));for(v(e,t,r,d,this.compareMinX),s=t;s<=r;s+=d)for(v(e,s,c=Math.min(s+d-1,r),f,this.compareMinY),u=s;u<=c;u+=f)l=Math.min(u+f-1,c),o.children.push(this._build(e,u,l,n-1));return h(o,this.toBBox),o},_chooseSubtree:function(e,t,r,n){for(var o,i,a,s,u,c,h,l,f,d;n.push(t),!t.leaf&&n.length-1!==r;){for(h=l=1/0,o=0,i=t.children.length;o<i;o++)u=p(a=t.children[o]),f=e,d=a,(c=(Math.max(d.maxX,f.maxX)-Math.min(d.minX,f.minX))*(Math.max(d.maxY,f.maxY)-Math.min(d.minY,f.minY))-u)<l?(l=c,h=u<h?u:h,s=a):c===l&&u<h&&(h=u,s=a);t=s||t.children[0]}return t},_insert:function(e,t,r){var n=this.toBBox,o=r?e:n(e),i=[],a=this._chooseSubtree(o,this.data,t,i);for(a.children.push(e),f(a,o);t>=0&&i[t].children.length>this._maxEntries;)this._split(i,t),t--;this._adjustParentBBoxes(o,i,t)},_split:function(e,t){var r=e[t],n=r.children.length,o=this._minEntries;this._chooseSplitAxis(r,o,n);var i=this._chooseSplitIndex(r,o,n),a=b(r.children.splice(i,r.children.length-i));a.height=r.height,a.leaf=r.leaf,h(r,this.toBBox),h(a,this.toBBox),t?e[t-1].children.push(a):this._splitRoot(r,a)},_splitRoot:function(e,t){this.data=b([e,t]),this.data.height=e.height+1,this.data.leaf=!1,h(this.data,this.toBBox)},_chooseSplitIndex:function(e,t,r){var n,o,i,a,s,u,c,h,f,d,m,g,y,w;for(u=c=1/0,n=t;n<=r-t;n++)o=l(e,0,n,this.toBBox),i=l(e,n,r,this.toBBox),f=o,d=i,m=void 0,g=void 0,y=void 0,w=void 0,m=Math.max(f.minX,d.minX),g=Math.max(f.minY,d.minY),y=Math.min(f.maxX,d.maxX),w=Math.min(f.maxY,d.maxY),a=Math.max(0,y-m)*Math.max(0,w-g),s=p(o)+p(i),a<u?(u=a,h=n,c=s<c?s:c):a===u&&s<c&&(c=s,h=n);return h},_chooseSplitAxis:function(e,t,r){var n=e.leaf?this.compareMinX:d,o=e.leaf?this.compareMinY:m;this._allDistMargin(e,t,r,n)<this._allDistMargin(e,t,r,o)&&e.children.sort(n)},_allDistMargin:function(e,t,r,n){e.children.sort(n);var o,i,a=this.toBBox,s=l(e,0,t,a),u=l(e,r-t,r,a),c=g(s)+g(u);for(o=t;o<r-t;o++)i=e.children[o],f(s,e.leaf?a(i):i),c+=g(s);for(o=r-t-1;o>=t;o--)i=e.children[o],f(u,e.leaf?a(i):i),c+=g(u);return c},_adjustParentBBoxes:function(e,t,r){for(var n=r;n>=0;n--)f(t[n],e)},_condense:function(e){for(var t,r=e.length-1;r>=0;r--)0===e[r].children.length?r>0?(t=e[r-1].children).splice(t.indexOf(e[r]),1):this.clear():h(e[r],this.toBBox)},_initFormat:function(e){var t=["return a"," - b",";"];this.compareMinX=new Function("a","b",t.join(e[0])),this.compareMinY=new Function("a","b",t.join(e[1])),this.toBBox=new Function("a","return {minX: a"+e[0]+", minY: a"+e[1]+", maxX: a"+e[2]+", maxY: a"+e[3]+"};")}};var x=u;function M(e){var t=[e[0],e[1]],r=[e[0],e[3]],n=[e[2],e[3]];return{type:"Feature",bbox:e,properties:{},geometry:{type:"Polygon",coordinates:[[t,[e[2],e[1]],n,r,t]]}}}function E(e){var t=[1/0,1/0,-1/0,-1/0];return Object(n.b)(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}var j=function(e){var t=x(e);return t.insert=function(e){if(Array.isArray(e)){var t=e;(e=M(t)).bbox=t}else e.bbox=e.bbox?e.bbox:E(e);return x.prototype.insert.call(this,e)},t.load=function(e){var t=[];return Array.isArray(e)?e.forEach((function(e){var r=M(e);r.bbox=e,t.push(r)})):Object(n.c)(e,(function(e){e.bbox=e.bbox?e.bbox:E(e),t.push(e)})),x.prototype.load.call(this,t)},t.remove=function(e){if(Array.isArray(e)){var t=e;(e=M(t)).bbox=t}return x.prototype.remove.call(this,e)},t.clear=function(){return x.prototype.clear.call(this)},t.search=function(e){return{type:"FeatureCollection",features:x.prototype.search.call(this,this.toBBox(e))}},t.collides=function(e){return x.prototype.collides.call(this,this.toBBox(e))},t.all=function(){return{type:"FeatureCollection",features:x.prototype.all.call(this)}},t.toJSON=function(){return x.prototype.toJSON.call(this)},t.fromJSON=function(e){return x.prototype.fromJSON.call(this,e)},t.toBBox=function(e){var t;return{minX:(t=e.bbox?e.bbox:Array.isArray(e)&&4===e.length?e:E(e))[0],minY:t[1],maxX:t[2],maxY:t[3]}},t},O=r("./node_modules/@turf/helpers/main.es.js");var _=function(e){if(!e)throw new Error("geojson is required");var t=[];return Object(n.d)(e,(function(e){!function(e,t){var r=[],n=e.geometry;switch(n.type){case"Polygon":r=Object(o.b)(n);break;case"LineString":r=[Object(o.b)(n)]}r.forEach((function(r){(function(e,t){var r=[];return e.reduce((function(e,n){var o,i,a,s,u,c,h=Object(O.g)([e,n],t);return h.bbox=(i=n,a=(o=e)[0],s=o[1],u=i[0],c=i[1],[a<u?a:u,s<c?s:c,a>u?a:u,s>c?s:c]),r.push(h),n})),r})(r,e.properties).forEach((function(e){e.id=t.length,t.push(e)}))}))}(e,t)})),Object(O.c)(t)};function P(e,t,r){if(r=r||{},!Object(O.e)(r))throw new Error("options is invalid");if(!0===r.final)return function(e,t){var r=P(t,e);return r=(r+180)%360}(e,t);var n=Object(o.a)(e),i=Object(o.a)(t),a=Object(O.a)(n[0]),s=Object(O.a)(i[0]),u=Object(O.a)(n[1]),c=Object(O.a)(i[1]),h=Math.sin(s-a)*Math.cos(c),l=Math.cos(u)*Math.sin(c)-Math.sin(u)*Math.cos(c)*Math.cos(s-a);return Object(O.j)(Math.atan2(h,l))}var S=P;var q=function(e,t,r){if(r=r||{},!Object(O.e)(r))throw new Error("options is invalid");var n=r.units,i=Object(o.a)(e),a=Object(o.a)(t),s=Object(O.a)(a[1]-i[1]),u=Object(O.a)(a[0]-i[0]),c=Object(O.a)(i[1]),h=Object(O.a)(a[1]),l=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(u/2),2)*Math.cos(c)*Math.cos(h);return Object(O.k)(2*Math.atan2(Math.sqrt(l),Math.sqrt(1-l)),n)};var B=function(e,t,r,n){if(n=n||{},!Object(O.e)(n))throw new Error("options is invalid");var i=n.units,a=n.properties,s=Object(o.a)(e),u=Object(O.a)(s[0]),c=Object(O.a)(s[1]),h=Object(O.a)(r),l=Object(O.f)(t,i),f=Math.asin(Math.sin(c)*Math.cos(l)+Math.cos(c)*Math.sin(l)*Math.cos(h)),d=u+Math.atan2(Math.sin(h)*Math.sin(l)*Math.cos(c),Math.cos(l)-Math.sin(c)*Math.sin(f)),m=Object(O.j)(d),p=Object(O.j)(f);return Object(O.h)([m,p],a)};function C(e,t){var r=Object(o.b)(e),n=Object(o.b)(t);if(2!==r.length)throw new Error("<intersects> line1 must only contain 2 coordinates");if(2!==n.length)throw new Error("<intersects> line2 must only contain 2 coordinates");var i=r[0][0],a=r[0][1],s=r[1][0],u=r[1][1],c=n[0][0],h=n[0][1],l=n[1][0],f=n[1][1],d=(f-h)*(s-i)-(l-c)*(u-a),m=(l-c)*(a-h)-(f-h)*(i-c),p=(s-i)*(a-h)-(u-a)*(i-c);if(0===d)return null;var g=m/d,y=p/d;if(g>=0&&g<=1&&y>=0&&y<=1){var w=i+g*(s-i),b=a+g*(u-a);return Object(O.h)([w,b])}return null}var F=function(e,t){var r={},i=[];if("LineString"===e.type&&(e=Object(O.b)(e)),"LineString"===t.type&&(t=Object(O.b)(t)),"Feature"===e.type&&"Feature"===t.type&&"LineString"===e.geometry.type&&"LineString"===t.geometry.type&&2===e.geometry.coordinates.length&&2===t.geometry.coordinates.length){var a=C(e,t);return a&&i.push(a),Object(O.c)(i)}var s=j();return s.load(_(t)),Object(n.c)(_(e),(function(e){Object(n.c)(s.search(e),(function(t){var n=C(e,t);if(n){var a=Object(o.b)(n).join(",");r[a]||(r[a]=!0,i.push(n))}}))})),Object(O.c)(i)};var X=function(e,t,r){if(r=r||{},!Object(O.e)(r))throw new Error("options is invalid");var i=e.geometry?e.geometry.type:e.type;if("LineString"!==i&&"MultiLineString"!==i)throw new Error("lines must be LineString or MultiLineString");var a=Object(O.h)([1/0,1/0],{dist:1/0}),s=0;return Object(n.d)(e,(function(e){for(var n=Object(o.b)(e),i=0;i<n.length-1;i++){var u=Object(O.h)(n[i]);u.properties.dist=q(t,u,r);var c=Object(O.h)(n[i+1]);c.properties.dist=q(t,c,r);var h=q(u,c,r),l=Math.max(u.properties.dist,c.properties.dist),f=S(u,c),d=B(t,l,f+90,r),m=B(t,l,f-90,r),p=F(Object(O.g)([d.geometry.coordinates,m.geometry.coordinates]),Object(O.g)([u.geometry.coordinates,c.geometry.coordinates])),g=null;p.features.length>0&&((g=p.features[0]).properties.dist=q(t,g,r),g.properties.location=s+q(u,g,r)),u.properties.dist<a.properties.dist&&((a=u).properties.index=i,a.properties.location=s),c.properties.dist<a.properties.dist&&((a=c).properties.index=i+1,a.properties.location=s+h),g&&g.properties.dist<a.properties.dist&&((a=g).properties.index=i),s+=h}})),a},Y=r("./node_modules/@turf/boolean-point-on-line/main.es.js"),A=Array.prototype.slice;function k(e){return"[object Arguments]"===Object.prototype.toString.call(e)}function N(e,t,r){return r||(r={}),e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?(r.strict,e===t):function(e,t,r){var n,o;if(L(e)||L(t))return!1;if(e.prototype!==t.prototype)return!1;if(k(e))return!!k(t)&&(e=A.call(e),t=A.call(t),N(e,t,r));if(I(e)){if(!I(t))return!1;if(e.length!==t.length)return!1;for(n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}try{var i=Object.keys(e),a=Object.keys(t)}catch(e){return!1}if(i.length!==a.length)return!1;for(i.sort(),a.sort(),n=i.length-1;n>=0;n--)if(i[n]!==a[n])return!1;for(n=i.length-1;n>=0;n--)if(o=i[n],!N(e[o],t[o],r))return!1;return typeof e==typeof t}(e,t,r))}function L(e){return null==e}function I(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}function R(e,t){var r=Object(o.b)(t),n=Object(o.b)(e),i=n[0],a=n[n.length-1],s=e.geometry.coordinates;return N(r[0],i)?s.unshift(r[1]):N(r[0],a)?s.push(r[1]):N(r[1],i)?s.unshift(r[0]):N(r[1],a)&&s.push(r[0]),e}var G=function(e,t,r){if(r=r||{},!Object(O.e)(r))throw new Error("options is invalid");var i,a=r.tolerance||0,s=[],u=j();return u.load(_(e)),Object(n.e)(t,(function(e){var t=!1;Object(n.c)(u.search(e),(function(r){if(!1===t){var n=Object(o.b)(e).sort(),s=Object(o.b)(r).sort();N(n,s)||(0===a?Object(Y.a)(n[0],r)&&Object(Y.a)(n[1],r):X(r,n[0]).properties.dist<=a&&X(r,n[1]).properties.dist<=a)?(t=!0,i=i?R(i,e):e):(0===a?Object(Y.a)(s[0],e)&&Object(Y.a)(s[1],e):X(e,s[0]).properties.dist<=a&&X(e,s[1]).properties.dist<=a)&&(i=i?R(i,r):r)}})),!1===t&&i&&(s.push(i),i=void 0)})),i&&s.push(i),Object(O.c)(s)};function T(e,t){var r=Object(o.b)(e),n=Object(o.b)(t);if(2!==r.length)throw new Error("<intersects> line1 must only contain 2 coordinates");if(2!==n.length)throw new Error("<intersects> line2 must only contain 2 coordinates");var i=r[0][0],a=r[0][1],s=r[1][0],u=r[1][1],c=n[0][0],h=n[0][1],l=n[1][0],f=n[1][1],d=(f-h)*(s-i)-(l-c)*(u-a),m=(l-c)*(a-h)-(f-h)*(i-c),p=(s-i)*(a-h)-(u-a)*(i-c);if(0===d)return null;var g=m/d,y=p/d;if(g>=0&&g<=1&&y>=0&&y<=1){var w=i+g*(s-i),b=a+g*(u-a);return Object(O.h)([w,b])}return null}var D=function(e,t){var r={},i=[];if("LineString"===e.type&&(e=Object(O.b)(e)),"LineString"===t.type&&(t=Object(O.b)(t)),"Feature"===e.type&&"Feature"===t.type&&"LineString"===e.geometry.type&&"LineString"===t.geometry.type&&2===e.geometry.coordinates.length&&2===t.geometry.coordinates.length){var a=T(e,t);return a&&i.push(a),Object(O.c)(i)}var s=j();return s.load(_(t)),Object(n.c)(_(e),(function(e){Object(n.c)(s.search(e),(function(t){var n=T(e,t);if(n){var a=Object(o.b)(n).join(",");r[a]||(r[a]=!0,i.push(n))}}))})),Object(O.c)(i)},J=r("./node_modules/geojson-equality/index.js"),V=r.n(J);t.a=function(e,t){if(!e)throw new Error("feature1 is required");if(!t)throw new Error("feature2 is required");var r=Object(o.d)(e);if(r!==Object(o.d)(t))throw new Error("features must be of the same type");if("Point"===r)throw new Error("Point geometry not supported");if(new V.a({precision:6}).compare(e,t))return!1;var i=0;switch(r){case"MultiPoint":var a=Object(n.a)(e),s=Object(n.a)(t);a.forEach((function(e){s.forEach((function(t){e[0]===t[0]&&e[1]===t[1]&&i++}))}));break;case"LineString":case"MultiLineString":Object(n.e)(e,(function(e){Object(n.e)(t,(function(t){G(e,t).features.length&&i++}))}));break;case"Polygon":case"MultiPolygon":Object(n.e)(e,(function(e){Object(n.e)(t,(function(t){D(e,t).features.length&&i++}))}))}return i>0}},"./node_modules/@turf/boolean-point-on-line/main.es.js":function(e,t,r){"use strict";var n=r("./node_modules/@turf/invariant/main.es.js"),o=r("./node_modules/@turf/helpers/main.es.js");function i(e,t,r,n){var o=r[0],i=r[1],a=e[0],s=e[1],u=t[0],c=t[1],h=u-a,l=c-s;return 0==(r[0]-a)*l-(r[1]-s)*h&&(n?"start"===n?Math.abs(h)>=Math.abs(l)?h>0?a<o&&o<=u:u<=o&&o<a:l>0?s<i&&i<=c:c<=i&&i<s:"end"===n?Math.abs(h)>=Math.abs(l)?h>0?a<=o&&o<u:u<o&&o<=a:l>0?s<=i&&i<c:c<i&&i<=s:"both"===n?Math.abs(h)>=Math.abs(l)?h>0?a<o&&o<u:u<o&&o<a:l>0?s<i&&i<c:c<i&&i<s:void 0:Math.abs(h)>=Math.abs(l)?h>0?a<=o&&o<=u:u<=o&&o<=a:l>0?s<=i&&i<=c:c<=i&&i<=s)}t.a=function(e,t,r){var a=(r=r||{}).ignoreEndVertices;if(!Object(o.e)(r))throw new Error("invalid options");if(!e)throw new Error("pt is required");if(!t)throw new Error("line is required");for(var s=Object(n.a)(e),u=Object(n.b)(t),c=0;c<u.length-1;c++){var h=!1;if(a&&(0===c&&(h="start"),c===u.length-2&&(h="end"),0===c&&c+1===u.length-1&&(h="both")),i(u[c],u[c+1],s,h))return!0}return!1}},"./node_modules/@turf/great-circle/main.es.js":function(e,t,r){"use strict";var n=r("./node_modules/@turf/invariant/main.es.js"),o=Math.PI/180,i=180/Math.PI,a=function(e,t){this.lon=e,this.lat=t,this.x=o*e,this.y=o*t};a.prototype.view=function(){return String(this.lon).slice(0,4)+","+String(this.lat).slice(0,4)},a.prototype.antipode=function(){var e=-1*this.lat,t=this.lon<0?180+this.lon:-1*(180-this.lon);return new a(t,e)};var s=function(){this.coords=[],this.length=0};s.prototype.move_to=function(e){this.length++,this.coords.push(e)};var u=function(e){this.properties=e||{},this.geometries=[]};u.prototype.json=function(){if(this.geometries.length<=0)return{geometry:{type:"LineString",coordinates:null},type:"Feature",properties:this.properties};if(1===this.geometries.length)return{geometry:{type:"LineString",coordinates:this.geometries[0].coords},type:"Feature",properties:this.properties};for(var e=[],t=0;t<this.geometries.length;t++)e.push(this.geometries[t].coords);return{geometry:{type:"MultiLineString",coordinates:e},type:"Feature",properties:this.properties}},u.prototype.wkt=function(){for(var e="",t="LINESTRING(",r=function(e){t+=e[0]+" "+e[1]+","},n=0;n<this.geometries.length;n++){if(0===this.geometries[n].coords.length)return"LINESTRING(empty)";this.geometries[n].coords.forEach(r),e+=t.substring(0,t.length-1)+")"}return e};var c=function(e,t,r){if(!e||void 0===e.x||void 0===e.y)throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");if(!t||void 0===t.x||void 0===t.y)throw new Error("GreatCircle constructor expects two args: start and end objects with x and y properties");this.start=new a(e.x,e.y),this.end=new a(t.x,t.y),this.properties=r||{};var n=this.start.x-this.end.x,o=this.start.y-this.end.y,i=Math.pow(Math.sin(o/2),2)+Math.cos(this.start.y)*Math.cos(this.end.y)*Math.pow(Math.sin(n/2),2);if(this.g=2*Math.asin(Math.sqrt(i)),this.g===Math.PI)throw new Error("it appears "+e.view()+" and "+t.view()+" are 'antipodal', e.g diametrically opposite, thus there is no single route but rather infinite");if(isNaN(this.g))throw new Error("could not calculate great circle between "+e+" and "+t)};c.prototype.interpolate=function(e){var t=Math.sin((1-e)*this.g)/Math.sin(this.g),r=Math.sin(e*this.g)/Math.sin(this.g),n=t*Math.cos(this.start.y)*Math.cos(this.start.x)+r*Math.cos(this.end.y)*Math.cos(this.end.x),o=t*Math.cos(this.start.y)*Math.sin(this.start.x)+r*Math.cos(this.end.y)*Math.sin(this.end.x),a=t*Math.sin(this.start.y)+r*Math.sin(this.end.y),s=i*Math.atan2(a,Math.sqrt(Math.pow(n,2)+Math.pow(o,2)));return[i*Math.atan2(o,n),s]},c.prototype.Arc=function(e,t){var r=[];if(!e||e<=2)r.push([this.start.lon,this.start.lat]),r.push([this.end.lon,this.end.lat]);else for(var n=1/(e-1),o=0;o<e;++o){var i=n*o,a=this.interpolate(i);r.push(a)}for(var c=!1,h=0,l=t&&t.offset?t.offset:10,f=180-l,d=-180+l,m=360-l,p=1;p<r.length;++p){var g=r[p-1][0],y=r[p][0],w=Math.abs(y-g);w>m&&(y>f&&g<d||g>f&&y<d)?c=!0:w>h&&(h=w)}var b=[];if(c&&h<l){var v=[];b.push(v);for(var x=0;x<r.length;++x){var M=parseFloat(r[x][0]);if(x>0&&Math.abs(M-r[x-1][0])>m){var E=parseFloat(r[x-1][0]),j=parseFloat(r[x-1][1]),O=parseFloat(r[x][0]),_=parseFloat(r[x][1]);if(E>-180&&E<d&&180===O&&x+1<r.length&&r[x-1][0]>-180&&r[x-1][0]<d){v.push([-180,r[x][1]]),x++,v.push([r[x][0],r[x][1]]);continue}if(E>f&&E<180&&-180===O&&x+1<r.length&&r[x-1][0]>f&&r[x-1][0]<180){v.push([180,r[x][1]]),x++,v.push([r[x][0],r[x][1]]);continue}if(E<d&&O>f){var P=E;E=O,O=P;var S=j;j=_,_=S}if(E>f&&O<d&&(O+=360),E<=180&&O>=180&&E<O){var q=(180-E)/(O-E),B=q*_+(1-q)*j;v.push([r[x-1][0]>f?180:-180,B]),(v=[]).push([r[x-1][0]>f?-180:180,B]),b.push(v)}else v=[],b.push(v);v.push([M,r[x][1]])}else v.push([r[x][0],r[x][1]])}}else{var C=[];b.push(C);for(var F=0;F<r.length;++F)C.push([r[F][0],r[F][1]])}for(var X=new u(this.properties),Y=0;Y<b.length;++Y){var A=new s;X.geometries.push(A);for(var k=b[Y],N=0;N<k.length;++N)A.move_to(k[N])}return X},t.a=function(e,t,r){if("object"!=typeof(r=r||{}))throw new Error("options is invalid");var o=r.properties,i=r.npoints,a=r.offset;return e=Object(n.a)(e),t=Object(n.a)(t),o=o||{},i=i||100,a=a||10,new c({x:e[0],y:e[1]},{x:t[0],y:t[1]},o).Arc(i,{offset:a}).json()}},"./node_modules/@turf/helpers/main.es.js":function(e,t,r){"use strict";r.d(t,"b",(function(){return o})),r.d(t,"h",(function(){return i})),r.d(t,"i",(function(){return a})),r.d(t,"g",(function(){return s})),r.d(t,"c",(function(){return u})),r.d(t,"k",(function(){return c})),r.d(t,"f",(function(){return h})),r.d(t,"j",(function(){return l})),r.d(t,"a",(function(){return f})),r.d(t,"d",(function(){return d})),r.d(t,"e",(function(){return m})),r.d(t,"l",(function(){return p}));var n={meters:6371008.8,metres:6371008.8,millimeters:6371008800,millimetres:6371008800,centimeters:637100880,centimetres:637100880,kilometers:6371.0088,kilometres:6371.0088,miles:3958.761333810546,nauticalmiles:6371008.8/1852,inches:6371008.8*39.37,yards:6371008.8/1.0936,feet:20902260.511392,radians:1,degrees:6371008.8/111325};function o(e,t,r){if(!m(r=r||{}))throw new Error("options is invalid");var n=r.bbox,o=r.id;if(void 0===e)throw new Error("geometry is required");if(t&&t.constructor!==Object)throw new Error("properties must be an Object");n&&p(n),o&&g(o);var i={type:"Feature"};return o&&(i.id=o),n&&(i.bbox=n),i.properties=t||{},i.geometry=e,i}function i(e,t,r){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!d(e[0])||!d(e[1]))throw new Error("coordinates must contain numbers");return o({type:"Point",coordinates:e},t,r)}function a(e,t,r){if(!e)throw new Error("coordinates is required");for(var n=0;n<e.length;n++){var i=e[n];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var a=0;a<i[i.length-1].length;a++){if(0===n&&0===a&&!d(i[0][0])||!d(i[0][1]))throw new Error("coordinates must contain numbers");if(i[i.length-1][a]!==i[0][a])throw new Error("First and last Position are not equivalent.")}}return o({type:"Polygon",coordinates:e},t,r)}function s(e,t,r){if(!e)throw new Error("coordinates is required");if(e.length<2)throw new Error("coordinates must be an array of two or more positions");if(!d(e[0][1])||!d(e[0][1]))throw new Error("coordinates must contain numbers");return o({type:"LineString",coordinates:e},t,r)}function u(e,t){if(!m(t=t||{}))throw new Error("options is invalid");var r=t.bbox,n=t.id;if(!e)throw new Error("No features passed");if(!Array.isArray(e))throw new Error("features must be an Array");r&&p(r),n&&g(n);var o={type:"FeatureCollection"};return n&&(o.id=n),r&&(o.bbox=r),o.features=e,o}function c(e,t){if(null==e)throw new Error("radians is required");if(t&&"string"!=typeof t)throw new Error("units must be a string");var r=n[t||"kilometers"];if(!r)throw new Error(t+" units is invalid");return e*r}function h(e,t){if(null==e)throw new Error("distance is required");if(t&&"string"!=typeof t)throw new Error("units must be a string");var r=n[t||"kilometers"];if(!r)throw new Error(t+" units is invalid");return e/r}function l(e){if(null==e)throw new Error("radians is required");return 180*(e%(2*Math.PI))/Math.PI}function f(e){if(null==e)throw new Error("degrees is required");return e%360*Math.PI/180}function d(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function m(e){return!!e&&e.constructor===Object}function p(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!d(e))throw new Error("bbox must only contain numbers")}))}function g(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}},"./node_modules/@turf/invariant/main.es.js":function(e,t,r){"use strict";r.d(t,"a",(function(){return o})),r.d(t,"b",(function(){return i})),r.d(t,"c",(function(){return a})),r.d(t,"d",(function(){return s}));var n=r("./node_modules/@turf/helpers/main.es.js");function o(e){if(!e)throw new Error("obj is required");var t=i(e);if(t.length>1&&Object(n.d)(t[0])&&Object(n.d)(t[1]))return t;throw new Error("Coordinate is not a valid Point")}function i(e){if(!e)throw new Error("obj is required");var t;if(e.length?t=e:e.coordinates?t=e.coordinates:e.geometry&&e.geometry.coordinates&&(t=e.geometry.coordinates),t)return function e(t){if(t.length>1&&Object(n.d)(t[0])&&Object(n.d)(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return e(t[0]);throw new Error("coordinates must only contain numbers")}(t),t;throw new Error("No valid coordinates")}function a(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}function s(e,t){if(!e)throw new Error((t||"geojson")+" is required");if(e.geometry&&e.geometry.type)return e.geometry.type;if(e.type)return e.type;throw new Error((t||"geojson")+" is invalid")}},"./node_modules/@turf/line-intersect/index.js":function(e,t,r){var n=r("./node_modules/@turf/line-intersect/node_modules/@turf/helpers/index.js"),o=r("./node_modules/@turf/line-intersect/node_modules/@turf/meta/index.js"),i=r("./node_modules/@turf/line-intersect/node_modules/@turf/line-segment/index.js"),a=r("./node_modules/@turf/line-intersect/node_modules/@turf/invariant/index.js").getCoords,s=r("./node_modules/@turf/line-intersect/node_modules/geojson-rbush/index.js"),u=n.point,c=n.featureCollection,h=o.featureEach;function l(e,t){var r=a(e),n=a(t);if(2!==r.length)throw new Error("<intersects> line1 must only contain 2 coordinates");if(2!==n.length)throw new Error("<intersects> line2 must only contain 2 coordinates");var o=r[0][0],i=r[0][1],s=r[1][0],c=r[1][1],h=n[0][0],l=n[0][1],f=n[1][0],d=n[1][1],m=(d-l)*(s-o)-(f-h)*(c-i),p=(f-h)*(i-l)-(d-l)*(o-h),g=(s-o)*(i-l)-(c-i)*(o-h);if(0===m)return null;var y=p/m,w=g/m;return y>=0&&y<=1&&w>=0&&w<=1?u([o+y*(s-o),i+y*(c-i)]):null}e.exports=function(e,t){var r=[];if("LineString"===e.geometry.type&&"LineString"===t.geometry.type&&2===e.geometry.coordinates.length&&2===t.geometry.coordinates.length){var n=l(e,t);return n&&r.push(n),c(r)}var o=s();return o.load(i(t)),h(i(e),(function(e){h(o.search(e),(function(t){var n=l(e,t);n&&r.push(n)}))})),c(r)}},"./node_modules/@turf/line-intersect/node_modules/@turf/helpers/index.js":function(e,t){function r(e,t,r,n){if(void 0===e)throw new Error("geometry is required");if(t&&t.constructor!==Object)throw new Error("properties must be an Object");if(r&&4!==r.length)throw new Error("bbox must be an Array of 4 numbers");if(n&&-1===["string","number"].indexOf(typeof n))throw new Error("id must be a number or a string");var o={type:"Feature"};return n&&(o.id=n),r&&(o.bbox=r),o.properties=t||{},o.geometry=e,o}function n(e,t,n,o){if(!e)throw new Error("No coordinates passed");if(void 0===e.length)throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(!m(e[0])||!m(e[1]))throw new Error("Coordinates must contain numbers");return r({type:"Point",coordinates:e},t,n,o)}function o(e,t,n,o){if(!e)throw new Error("No coordinates passed");for(var i=0;i<e.length;i++){var a=e[i];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++){if(0===i&&0===s&&!m(a[0][0])||!m(a[0][1]))throw new Error("Coordinates must contain numbers");if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}}return r({type:"Polygon",coordinates:e},t,n,o)}function i(e,t,n,o){if(!e)throw new Error("No coordinates passed");if(e.length<2)throw new Error("Coordinates must be an array of two or more positions");if(!m(e[0][1])||!m(e[0][1]))throw new Error("Coordinates must contain numbers");return r({type:"LineString",coordinates:e},t,n,o)}function a(e,t,n,o){if(!e)throw new Error("No coordinates passed");return r({type:"MultiLineString",coordinates:e},t,n,o)}function s(e,t,n,o){if(!e)throw new Error("No coordinates passed");return r({type:"MultiPoint",coordinates:e},t,n,o)}function u(e,t,n,o){if(!e)throw new Error("No coordinates passed");return r({type:"MultiPolygon",coordinates:e},t,n,o)}var c={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,centimeters:6373e5,centimetres:6373e5,kilometers:6373,kilometres:6373,feet:20908792.65},h={kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,centimetres:1e4,millimeter:1e6,acres:247105e-9,miles:386e-9,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function l(e,t){if(null==e)throw new Error("radians is required");var r=c[t||"kilometers"];if(!r)throw new Error("units is invalid");return e*r}function f(e,t){if(null==e)throw new Error("distance is required");var r=c[t||"kilometers"];if(!r)throw new Error("units is invalid");return e/r}function d(e){if(null==e)throw new Error("radians is required");return 180*(e%(2*Math.PI))/Math.PI}function m(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}e.exports={feature:r,geometry:function(e,t,r){if(!e)throw new Error("type is required");if(!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");if(r&&4!==r.length)throw new Error("bbox must be an Array of 4 numbers");var c;switch(e){case"Point":c=n(t).geometry;break;case"LineString":c=i(t).geometry;break;case"Polygon":c=o(t).geometry;break;case"MultiPoint":c=s(t).geometry;break;case"MultiLineString":c=a(t).geometry;break;case"MultiPolygon":c=u(t).geometry;break;default:throw new Error(e+" is invalid")}return r&&(c.bbox=r),c},featureCollection:function(e,t,r){if(!e)throw new Error("No features passed");if(!Array.isArray(e))throw new Error("features must be an Array");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");if(r&&-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string");var n={type:"FeatureCollection"};return r&&(n.id=r),t&&(n.bbox=t),n.features=e,n},geometryCollection:function(e,t,n,o){if(!e)throw new Error("geometries is required");if(!Array.isArray(e))throw new Error("geometries must be an Array");return r({type:"GeometryCollection",geometries:e},t,n,o)},point:n,multiPoint:s,lineString:i,multiLineString:a,polygon:o,multiPolygon:u,radiansToDistance:l,distanceToRadians:f,distanceToDegrees:function(e,t){return d(f(e,t))},radians2degrees:d,degrees2radians:function(e){if(null==e)throw new Error("degrees is required");return e%360*Math.PI/180},bearingToAngle:function(e){if(null==e)throw new Error("bearing is required");var t=e%360;return t<0&&(t+=360),t},convertDistance:function(e,t,r){if(null==e)throw new Error("distance is required");if(!(e>=0))throw new Error("distance must be a positive number");return l(f(e,t),r||"kilometers")},convertArea:function(e,t,r){if(null==e)throw new Error("area is required");if(!(e>=0))throw new Error("area must be a positive number");var n=h[t||"meters"];if(!n)throw new Error("invalid original units");var o=h[r||"kilometers"];if(!o)throw new Error("invalid final units");return e/n*o},round:function(e,t){if(null==e||isNaN(e))throw new Error("num is required");if(t&&!(t>=0))throw new Error("precision must be a positive number");var r=Math.pow(10,t||0);return Math.round(e*r)/r},isNumber:m}},"./node_modules/@turf/line-intersect/node_modules/@turf/invariant/index.js":function(e,t){function r(e){if(!e)throw new Error("obj is required");var t;if(e.length?t=e:e.coordinates?t=e.coordinates:e.geometry&&e.geometry.coordinates&&(t=e.geometry.coordinates),t)return n(t),t;throw new Error("No valid coordinates")}function n(e){if(e.length>1&&"number"==typeof e[0]&&"number"==typeof e[1])return!0;if(Array.isArray(e[0])&&e[0].length)return n(e[0]);throw new Error("coordinates must only contain numbers")}function o(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}e.exports={geojsonType:function(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)},collectionOf:function(e,t,r){if(!e)throw new Error("No featureCollection passed");if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(var n=0;n<e.features.length;n++){var o=e.features[n];if(!o||"Feature"!==o.type||!o.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!o.geometry||o.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+o.geometry.type)}},featureOf:function(e,t,r){if(!e)throw new Error("No feature passed");if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)},getCoord:function(e){if(!e)throw new Error("obj is required");var t=r(e);if(t.length>1&&"number"==typeof t[0]&&"number"==typeof t[1])return t;throw new Error("Coordinate is not a valid Point")},getCoords:r,containsNumber:n,getGeom:o,getGeomType:function(e){if(!e)throw new Error("geojson is required");var t=o(e);if(t)return t.type}}},"./node_modules/@turf/line-intersect/node_modules/@turf/line-segment/index.js":function(e,t,r){var n=r("./node_modules/@turf/line-intersect/node_modules/@turf/helpers/index.js"),o=r("./node_modules/@turf/line-intersect/node_modules/@turf/invariant/index.js").getCoords,i=r("./node_modules/@turf/line-intersect/node_modules/@turf/meta/index.js").flattenEach,a=n.lineString,s=n.featureCollection;e.exports=function(e){if(!e)throw new Error("geojson is required");var t=[];return i(e,(function(e){!function(e,t){var r=[],n=e.geometry;switch(n.type){case"Polygon":r=o(n);break;case"LineString":r=[o(n)]}r.forEach((function(r){(function(e,t){var r=[];return e.reduce((function(e,n){var o,i,s,u,c,h,l=a([e,n],t);return l.bbox=(i=n,s=(o=e)[0],u=o[1],c=i[0],h=i[1],[s<c?s:c,u<h?u:h,s>c?s:c,u>h?u:h]),r.push(l),n})),r})(r,e.properties).forEach((function(e){e.id=t.length,t.push(e)}))}))}(e,t)})),s(t)}},"./node_modules/@turf/line-intersect/node_modules/@turf/meta/index.js":function(e,t,r){"use strict";function n(e,t,r){if(null!==e){var o,i,a,s,u,c,h,l,f,d,m=0,p=0,g=e.type,y="FeatureCollection"===g,w="Feature"===g,b=y?e.features.length:1;for(o=0;o<b;o++)for(h=(d=!!(f=y?e.features[o].geometry:w?e.geometry:e)&&"GeometryCollection"===f.type)?f.geometries.length:1,i=0;i<h;i++){var v=0;if(null!==(c=d?f.geometries[i]:f)){l=c.coordinates;var x=c.type;switch(m=!r||"Polygon"!==x&&"MultiPolygon"!==x?0:1,x){case null:break;case"Point":t(l,p,o,v),p++,v++;break;case"LineString":case"MultiPoint":for(a=0;a<l.length;a++)t(l[a],p,o,v),p++,"MultiPoint"===x&&v++;"LineString"===x&&v++;break;case"Polygon":case"MultiLineString":for(a=0;a<l.length;a++){for(s=0;s<l[a].length-m;s++)t(l[a][s],p,o,v),p++;"MultiLineString"===x&&v++}"Polygon"===x&&v++;break;case"MultiPolygon":for(a=0;a<l.length;a++){for(s=0;s<l[a].length;s++)for(u=0;u<l[a][s].length-m;u++)t(l[a][s][u],p,o,v),p++;v++}break;case"GeometryCollection":for(a=0;a<c.geometries.length;a++)n(c.geometries[a],t,r);break;default:throw new Error("Unknown Geometry Type")}}}}}function o(e,t,r,o){var i=r;return n(e,(function(e,n,o,a){i=0===n&&void 0===r?e:t(i,e,n,o,a)}),o),i}function i(e,t){var r;switch(e.type){case"FeatureCollection":for(r=0;r<e.features.length;r++)t(e.features[r].properties,r);break;case"Feature":t(e.properties,0)}}function a(e,t,r){var n=r;return i(e,(function(e,o){n=0===o&&void 0===r?e:t(n,e,o)})),n}function s(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length;r++)t(e.features[r],r)}function u(e,t,r){var n=r;return s(e,(function(e,o){n=0===o&&void 0===r?e:t(n,e,o)})),n}function c(e){var t=[];return n(e,(function(e){t.push(e)})),t}function h(e,t){var r,n,o,i,a,s,u,c,h=0,l="FeatureCollection"===e.type,f="Feature"===e.type,d=l?e.features.length:1;for(r=0;r<d;r++){for(s=l?e.features[r].geometry:f?e.geometry:e,c=l?e.features[r].properties:f?e.properties:{},a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?s.geometries[o]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":t(i,h,c);break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)t(i.geometries[n],h,c);break;default:throw new Error("Unknown Geometry Type")}else t(null,h,c);h++}}function l(e,t,r){var n=r;return h(e,(function(e,o,i){n=0===o&&void 0===r?e:t(n,e,o,i)})),n}function f(e,t){h(e,(function(e,r,n){var o,i=null===e?null:e.type;switch(i){case null:case"Point":case"LineString":case"Polygon":return void t(g(e,n),r,0)}switch(i){case"MultiPoint":o="Point";break;case"MultiLineString":o="LineString";break;case"MultiPolygon":o="Polygon"}e.coordinates.forEach((function(e,i){t(g({type:o,coordinates:e},n),r,i)}))}))}function d(e,t,r){var n=r;return f(e,(function(e,o,i){n=0===o&&0===i&&void 0===r?e:t(n,e,o,i)})),n}function m(e,t){f(e,(function(e,r,n){var i=0;if(e.geometry){var a=e.geometry.type;"Point"!==a&&"MultiPoint"!==a&&o(e,(function(o,a){var s=y([o,a],e.properties);return t(s,r,n,i),i++,a}))}}))}function p(e,t,r){var n=r,o=!1;return m(e,(function(e,i,a,s){n=!1===o&&void 0===r?e:t(n,e,i,a,s),o=!0})),n}function g(e,t){if(void 0===e)throw new Error("No geometry passed");return{type:"Feature",properties:t||{},geometry:e}}function y(e,t){if(!e)throw new Error("No coordinates passed");if(e.length<2)throw new Error("Coordinates must be an array of two or more positions");return{type:"Feature",properties:t||{},geometry:{type:"LineString",coordinates:e}}}function w(e,t){if(!e)throw new Error("geojson is required");var r=e.geometry?e.geometry.type:e.type;if(!r)throw new Error("invalid geojson");if("FeatureCollection"===r)throw new Error("FeatureCollection is not supported");if("GeometryCollection"===r)throw new Error("GeometryCollection is not supported");var n=e.geometry?e.geometry.coordinates:e.coordinates;if(!n)throw new Error("geojson must contain coordinates");switch(r){case"LineString":return void t(n,0,0);case"Polygon":case"MultiLineString":for(var o=0,i=0;i<n.length;i++)"MultiLineString"===r&&(o=i),t(n[i],i,o);return;case"MultiPolygon":for(var a=0;a<n.length;a++)for(var s=0;s<n[a].length;s++)t(n[a][s],s,a);return;default:throw new Error(r+" geometry not supported")}}function b(e,t,r){var n=r;return w(e,(function(e,o,i){n=0===o&&void 0===r?e:t(n,e,o,i)})),n}r.r(t),r.d(t,"coordEach",(function(){return n})),r.d(t,"coordReduce",(function(){return o})),r.d(t,"propEach",(function(){return i})),r.d(t,"propReduce",(function(){return a})),r.d(t,"featureEach",(function(){return s})),r.d(t,"featureReduce",(function(){return u})),r.d(t,"coordAll",(function(){return c})),r.d(t,"geomEach",(function(){return h})),r.d(t,"geomReduce",(function(){return l})),r.d(t,"flattenEach",(function(){return f})),r.d(t,"flattenReduce",(function(){return d})),r.d(t,"segmentEach",(function(){return m})),r.d(t,"segmentReduce",(function(){return p})),r.d(t,"feature",(function(){return g})),r.d(t,"lineString",(function(){return y})),r.d(t,"lineEach",(function(){return w})),r.d(t,"lineReduce",(function(){return b}))},"./node_modules/@turf/line-intersect/node_modules/geojson-rbush/index.js":function(e,t,r){var n=r("./node_modules/@turf/line-intersect/node_modules/rbush/index.js"),o=r("./node_modules/@turf/line-intersect/node_modules/@turf/meta/index.js"),i=o.featureEach,a=o.coordEach;function s(e){var t=[e[0],e[1]],r=[e[0],e[3]],n=[e[2],e[3]];return{type:"Feature",bbox:e,properties:{},geometry:{type:"Polygon",coordinates:[[t,[e[2],e[1]],n,r,t]]}}}function u(e){var t=[1/0,1/0,-1/0,-1/0];return a(e,(function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])})),t}e.exports=function(e){var t=n(e);return t.insert=function(e){if(Array.isArray(e)){var t=e;(e=s(t)).bbox=t}else e.bbox=e.bbox?e.bbox:u(e);return n.prototype.insert.call(this,e)},t.load=function(e){var t=[];return Array.isArray(e)?e.forEach((function(e){var r=s(e);r.bbox=e,t.push(r)})):i(e,(function(e){e.bbox=e.bbox?e.bbox:u(e),t.push(e)})),n.prototype.load.call(this,t)},t.remove=function(e){if(Array.isArray(e)){var t=e;(e=s(t)).bbox=t}return n.prototype.remove.call(this,e)},t.clear=function(){return n.prototype.clear.call(this)},t.search=function(e){return{type:"FeatureCollection",features:n.prototype.search.call(this,this.toBBox(e))}},t.collides=function(e){return n.prototype.collides.call(this,this.toBBox(e))},t.all=function(){return{type:"FeatureCollection",features:n.prototype.all.call(this)}},t.toJSON=function(){return n.prototype.toJSON.call(this)},t.fromJSON=function(e){return n.prototype.fromJSON.call(this,e)},t.toBBox=function(e){var t;return{minX:(t=e.bbox?e.bbox:Array.isArray(e)&&4===e.length?e:u(e))[0],minY:t[1],maxX:t[2],maxY:t[3]}},t}},"./node_modules/@turf/line-intersect/node_modules/quickselect/quickselect.js":function(e,t,r){e.exports=function(){"use strict";function e(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function t(e,t){return e<t?-1:e>t?1:0}return function(r,n,o,i,a){!function t(r,n,o,i,a){for(;i>o;){if(i-o>600){var s=i-o+1,u=n-o+1,c=Math.log(s),h=.5*Math.exp(2*c/3),l=.5*Math.sqrt(c*h*(s-h)/s)*(u-s/2<0?-1:1),f=Math.max(o,Math.floor(n-u*h/s+l)),d=Math.min(i,Math.floor(n+(s-u)*h/s+l));t(r,n,f,d,a)}var m=r[n],p=o,g=i;for(e(r,o,n),a(r[i],m)>0&&e(r,o,i);p<g;){for(e(r,p,g),p++,g--;a(r[p],m)<0;)p++;for(;a(r[g],m)>0;)g--}0===a(r[o],m)?e(r,o,g):(g++,e(r,g,i)),g<=n&&(o=g+1),n<=g&&(i=g-1)}}(r,n,o||0,i||r.length-1,a||t)}}()},"./node_modules/@turf/line-intersect/node_modules/rbush/index.js":function(e,t,r){"use strict";e.exports=o,e.exports.default=o;var n=r("./node_modules/@turf/line-intersect/node_modules/quickselect/quickselect.js");function o(e,t){if(!(this instanceof o))return new o(e,t);this._maxEntries=Math.max(4,e||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),t&&this._initFormat(t),this.clear()}function i(e,t,r){if(!r)return t.indexOf(e);for(var n=0;n<t.length;n++)if(r(e,t[n]))return n;return-1}function a(e,t){s(e,0,e.children.length,t,e)}function s(e,t,r,n,o){o||(o=p(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var i,a=t;a<r;a++)i=e.children[a],u(o,e.leaf?n(i):i);return o}function u(e,t){return e.minX=Math.min(e.minX,t.minX),e.minY=Math.min(e.minY,t.minY),e.maxX=Math.max(e.maxX,t.maxX),e.maxY=Math.max(e.maxY,t.maxY),e}function c(e,t){return e.minX-t.minX}function h(e,t){return e.minY-t.minY}function l(e){return(e.maxX-e.minX)*(e.maxY-e.minY)}function f(e){return e.maxX-e.minX+(e.maxY-e.minY)}function d(e,t){return e.minX<=t.minX&&e.minY<=t.minY&&t.maxX<=e.maxX&&t.maxY<=e.maxY}function m(e,t){return t.minX<=e.maxX&&t.minY<=e.maxY&&t.maxX>=e.minX&&t.maxY>=e.minY}function p(e){return{children:e,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function g(e,t,r,o,i){for(var a,s=[t,r];s.length;)(r=s.pop())-(t=s.pop())<=o||(a=t+Math.ceil((r-t)/o/2)*o,n(e,a,t,r,i),s.push(t,a,a,r))}o.prototype={all:function(){return this._all(this.data,[])},search:function(e){var t=this.data,r=[],n=this.toBBox;if(!m(e,t))return r;for(var o,i,a,s,u=[];t;){for(o=0,i=t.children.length;o<i;o++)a=t.children[o],m(e,s=t.leaf?n(a):a)&&(t.leaf?r.push(a):d(e,s)?this._all(a,r):u.push(a));t=u.pop()}return r},collides:function(e){var t=this.data,r=this.toBBox;if(!m(e,t))return!1;for(var n,o,i,a,s=[];t;){for(n=0,o=t.children.length;n<o;n++)if(i=t.children[n],m(e,a=t.leaf?r(i):i)){if(t.leaf||d(e,a))return!0;s.push(i)}t=s.pop()}return!1},load:function(e){if(!e||!e.length)return this;if(e.length<this._minEntries){for(var t=0,r=e.length;t<r;t++)this.insert(e[t]);return this}var n=this._build(e.slice(),0,e.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var o=this.data;this.data=n,n=o}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},insert:function(e){return e&&this._insert(e,this.data.height-1),this},clear:function(){return this.data=p([]),this},remove:function(e,t){if(!e)return this;for(var r,n,o,a,s=this.data,u=this.toBBox(e),c=[],h=[];s||c.length;){if(s||(s=c.pop(),n=c[c.length-1],r=h.pop(),a=!0),s.leaf&&-1!==(o=i(e,s.children,t)))return s.children.splice(o,1),c.push(s),this._condense(c),this;a||s.leaf||!d(s,u)?n?(r++,s=n.children[r],a=!1):s=null:(c.push(s),h.push(r),r=0,n=s,s=s.children[0])}return this},toBBox:function(e){return e},compareMinX:c,compareMinY:h,toJSON:function(){return this.data},fromJSON:function(e){return this.data=e,this},_all:function(e,t){for(var r=[];e;)e.leaf?t.push.apply(t,e.children):r.push.apply(r,e.children),e=r.pop();return t},_build:function(e,t,r,n){var o,i=r-t+1,s=this._maxEntries;if(i<=s)return a(o=p(e.slice(t,r+1)),this.toBBox),o;n||(n=Math.ceil(Math.log(i)/Math.log(s)),s=Math.ceil(i/Math.pow(s,n-1))),(o=p([])).leaf=!1,o.height=n;var u,c,h,l,f=Math.ceil(i/s),d=f*Math.ceil(Math.sqrt(s));for(g(e,t,r,d,this.compareMinX),u=t;u<=r;u+=d)for(g(e,u,h=Math.min(u+d-1,r),f,this.compareMinY),c=u;c<=h;c+=f)l=Math.min(c+f-1,h),o.children.push(this._build(e,c,l,n-1));return a(o,this.toBBox),o},_chooseSubtree:function(e,t,r,n){for(var o,i,a,s,u,c,h,f,d,m;n.push(t),!t.leaf&&n.length-1!==r;){for(h=f=1/0,o=0,i=t.children.length;o<i;o++)u=l(a=t.children[o]),d=e,m=a,(c=(Math.max(m.maxX,d.maxX)-Math.min(m.minX,d.minX))*(Math.max(m.maxY,d.maxY)-Math.min(m.minY,d.minY))-u)<f?(f=c,h=u<h?u:h,s=a):c===f&&u<h&&(h=u,s=a);t=s||t.children[0]}return t},_insert:function(e,t,r){var n=this.toBBox,o=r?e:n(e),i=[],a=this._chooseSubtree(o,this.data,t,i);for(a.children.push(e),u(a,o);t>=0&&i[t].children.length>this._maxEntries;)this._split(i,t),t--;this._adjustParentBBoxes(o,i,t)},_split:function(e,t){var r=e[t],n=r.children.length,o=this._minEntries;this._chooseSplitAxis(r,o,n);var i=this._chooseSplitIndex(r,o,n),s=p(r.children.splice(i,r.children.length-i));s.height=r.height,s.leaf=r.leaf,a(r,this.toBBox),a(s,this.toBBox),t?e[t-1].children.push(s):this._splitRoot(r,s)},_splitRoot:function(e,t){this.data=p([e,t]),this.data.height=e.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},_chooseSplitIndex:function(e,t,r){var n,o,i,a,u,c,h,f,d,m,p,g,y,w;for(c=h=1/0,n=t;n<=r-t;n++)o=s(e,0,n,this.toBBox),i=s(e,n,r,this.toBBox),d=o,m=i,p=void 0,g=void 0,y=void 0,w=void 0,p=Math.max(d.minX,m.minX),g=Math.max(d.minY,m.minY),y=Math.min(d.maxX,m.maxX),w=Math.min(d.maxY,m.maxY),a=Math.max(0,y-p)*Math.max(0,w-g),u=l(o)+l(i),a<c?(c=a,f=n,h=u<h?u:h):a===c&&u<h&&(h=u,f=n);return f},_chooseSplitAxis:function(e,t,r){var n=e.leaf?this.compareMinX:c,o=e.leaf?this.compareMinY:h;this._allDistMargin(e,t,r,n)<this._allDistMargin(e,t,r,o)&&e.children.sort(n)},_allDistMargin:function(e,t,r,n){e.children.sort(n);var o,i,a=this.toBBox,c=s(e,0,t,a),h=s(e,r-t,r,a),l=f(c)+f(h);for(o=t;o<r-t;o++)i=e.children[o],u(c,e.leaf?a(i):i),l+=f(c);for(o=r-t-1;o>=t;o--)i=e.children[o],u(h,e.leaf?a(i):i),l+=f(h);return l},_adjustParentBBoxes:function(e,t,r){for(var n=r;n>=0;n--)u(t[n],e)},_condense:function(e){for(var t,r=e.length-1;r>=0;r--)0===e[r].children.length?r>0?(t=e[r-1].children).splice(t.indexOf(e[r]),1):this.clear():a(e[r],this.toBBox)},_initFormat:function(e){var t=["return a"," - b",";"];this.compareMinX=new Function("a","b",t.join(e[0])),this.compareMinY=new Function("a","b",t.join(e[1])),this.toBBox=new Function("a","return {minX: a"+e[0]+", minY: a"+e[1]+", maxX: a"+e[2]+", maxY: a"+e[3]+"};")}}},"./node_modules/@turf/meta/main.es.js":function(e,t,r){"use strict";r.d(t,"b",(function(){return o})),r.d(t,"c",(function(){return i})),r.d(t,"a",(function(){return a})),r.d(t,"d",(function(){return u})),r.d(t,"e",(function(){return c}));var n=r("./node_modules/@turf/helpers/main.es.js");function o(e,t,r){if(null!==e)for(var n,i,a,s,u,c,h,l,f=0,d=0,m=e.type,p="FeatureCollection"===m,g="Feature"===m,y=p?e.features.length:1,w=0;w<y;w++){u=(l=!!(h=p?e.features[w].geometry:g?e.geometry:e)&&"GeometryCollection"===h.type)?h.geometries.length:1;for(var b=0;b<u;b++){var v=0,x=0;if(null!==(s=l?h.geometries[b]:h)){c=s.coordinates;var M=s.type;switch(f=!r||"Polygon"!==M&&"MultiPolygon"!==M?0:1,M){case null:break;case"Point":t(c,d,w,v,x),d++,v++;break;case"LineString":case"MultiPoint":for(n=0;n<c.length;n++)t(c[n],d,w,v,x),d++,"MultiPoint"===M&&v++;"LineString"===M&&v++;break;case"Polygon":case"MultiLineString":for(n=0;n<c.length;n++){for(i=0;i<c[n].length-f;i++)t(c[n][i],d,w,v,x),d++;"MultiLineString"===M&&v++,"Polygon"===M&&x++}"Polygon"===M&&v++;break;case"MultiPolygon":for(n=0;n<c.length;n++){for("MultiPolygon"===M&&(x=0),i=0;i<c[n].length;i++){for(a=0;a<c[n][i].length-f;a++)t(c[n][i][a],d,w,v,x),d++;x++}v++}break;case"GeometryCollection":for(n=0;n<s.geometries.length;n++)o(s.geometries[n],t,r);break;default:throw new Error("Unknown Geometry Type")}}}}}function i(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length;r++)t(e.features[r],r)}function a(e){var t=[];return o(e,(function(e){t.push(e)})),t}function s(e,t){var r,n,o,i,a,s,u,c,h,l,f=0,d="FeatureCollection"===e.type,m="Feature"===e.type,p=d?e.features.length:1;for(r=0;r<p;r++){for(s=d?e.features[r].geometry:m?e.geometry:e,c=d?e.features[r].properties:m?e.properties:{},h=d?e.features[r].bbox:m?e.bbox:void 0,l=d?e.features[r].id:m?e.id:void 0,a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?s.geometries[o]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":t(i,f,c,h,l);break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)t(i.geometries[n],f,c,h,l);break;default:throw new Error("Unknown Geometry Type")}else t(null,f,c,h,l);f++}}function u(e,t){s(e,(function(e,r,o,i,a){var s,u=null===e?null:e.type;switch(u){case null:case"Point":case"LineString":case"Polygon":return void t(Object(n.b)(e,o,{bbox:i,id:a}),r,0)}switch(u){case"MultiPoint":s="Point";break;case"MultiLineString":s="LineString";break;case"MultiPolygon":s="Polygon"}e.coordinates.forEach((function(e,i){var a={type:s,coordinates:e};t(Object(n.b)(a,o),r,i)}))}))}function c(e,t){u(e,(function(e,r,i){var a=0;if(e.geometry){var s=e.geometry.type;"Point"!==s&&"MultiPoint"!==s&&function(e,t,r,n){var i=r;o(e,(function(e,n,o,a,s){i=0===n&&void 0===r?e:t(i,e,n,o,a,s)}),n)}(e,(function(o,s,u,c,h,l){var f=Object(n.g)([o,s],e.properties);return t(f,r,i,l,a),a++,s}))}}))}},"./node_modules/@turf/polygon-to-linestring/index.js":function(e,t,r){var n=r("./node_modules/@turf/polygon-to-linestring/node_modules/@turf/invariant/index.js").getCoords,o=r("./node_modules/@turf/polygon-to-linestring/node_modules/@turf/helpers/index.js"),i=o.lineString,a=o.multiLineString,s=o.featureCollection;function u(e,t){return e.length>1?a(e,t):i(e[0],t)}e.exports=function(e){var t,r=(t=e).geometry?t.geometry.type:t.type,o=n(e),i=e.properties;if(!o.length)throw new Error("polygon must contain coordinates");switch(r){case"Polygon":return s([u(o,i)]);case"MultiPolygon":var a=[];return o.forEach((function(e){a.push(u(e,i))})),s(a);default:throw new Error("geom "+r+" not supported")}}},"./node_modules/@turf/polygon-to-linestring/node_modules/@turf/helpers/index.js":function(e,t){function r(e,t,r,n){if(void 0===e)throw new Error("geometry is required");if(t&&t.constructor!==Object)throw new Error("properties must be an Object");if(r&&4!==r.length)throw new Error("bbox must be an Array of 4 numbers");if(n&&-1===["string","number"].indexOf(typeof n))throw new Error("id must be a number or a string");var o={type:"Feature"};return n&&(o.id=n),r&&(o.bbox=r),o.properties=t||{},o.geometry=e,o}function n(e,t,n,o){if(!e)throw new Error("No coordinates passed");if(void 0===e.length)throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(!m(e[0])||!m(e[1]))throw new Error("Coordinates must contain numbers");return r({type:"Point",coordinates:e},t,n,o)}function o(e,t,n,o){if(!e)throw new Error("No coordinates passed");for(var i=0;i<e.length;i++){var a=e[i];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++){if(0===i&&0===s&&!m(a[0][0])||!m(a[0][1]))throw new Error("Coordinates must contain numbers");if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}}return r({type:"Polygon",coordinates:e},t,n,o)}function i(e,t,n,o){if(!e)throw new Error("No coordinates passed");if(e.length<2)throw new Error("Coordinates must be an array of two or more positions");if(!m(e[0][1])||!m(e[0][1]))throw new Error("Coordinates must contain numbers");return r({type:"LineString",coordinates:e},t,n,o)}function a(e,t,n,o){if(!e)throw new Error("No coordinates passed");return r({type:"MultiLineString",coordinates:e},t,n,o)}function s(e,t,n,o){if(!e)throw new Error("No coordinates passed");return r({type:"MultiPoint",coordinates:e},t,n,o)}function u(e,t,n,o){if(!e)throw new Error("No coordinates passed");return r({type:"MultiPolygon",coordinates:e},t,n,o)}var c={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,centimeters:6373e5,centimetres:6373e5,kilometers:6373,kilometres:6373,feet:20908792.65},h={kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,centimetres:1e4,millimeter:1e6,acres:247105e-9,miles:386e-9,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function l(e,t){if(null==e)throw new Error("radians is required");var r=c[t||"kilometers"];if(!r)throw new Error("units is invalid");return e*r}function f(e,t){if(null==e)throw new Error("distance is required");var r=c[t||"kilometers"];if(!r)throw new Error("units is invalid");return e/r}function d(e){if(null==e)throw new Error("radians is required");return 180*(e%(2*Math.PI))/Math.PI}function m(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}e.exports={feature:r,geometry:function(e,t,r){if(!e)throw new Error("type is required");if(!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");if(r&&4!==r.length)throw new Error("bbox must be an Array of 4 numbers");var c;switch(e){case"Point":c=n(t).geometry;break;case"LineString":c=i(t).geometry;break;case"Polygon":c=o(t).geometry;break;case"MultiPoint":c=s(t).geometry;break;case"MultiLineString":c=a(t).geometry;break;case"MultiPolygon":c=u(t).geometry;break;default:throw new Error(e+" is invalid")}return r&&(c.bbox=r),c},featureCollection:function(e,t,r){if(!e)throw new Error("No features passed");if(!Array.isArray(e))throw new Error("features must be an Array");if(t&&4!==t.length)throw new Error("bbox must be an Array of 4 numbers");if(r&&-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string");var n={type:"FeatureCollection"};return r&&(n.id=r),t&&(n.bbox=t),n.features=e,n},geometryCollection:function(e,t,n,o){if(!e)throw new Error("geometries is required");if(!Array.isArray(e))throw new Error("geometries must be an Array");return r({type:"GeometryCollection",geometries:e},t,n,o)},point:n,multiPoint:s,lineString:i,multiLineString:a,polygon:o,multiPolygon:u,radiansToDistance:l,distanceToRadians:f,distanceToDegrees:function(e,t){return d(f(e,t))},radians2degrees:d,degrees2radians:function(e){if(null==e)throw new Error("degrees is required");return e%360*Math.PI/180},bearingToAngle:function(e){if(null==e)throw new Error("bearing is required");var t=e%360;return t<0&&(t+=360),t},convertDistance:function(e,t,r){if(null==e)throw new Error("distance is required");if(!(e>=0))throw new Error("distance must be a positive number");return l(f(e,t),r||"kilometers")},convertArea:function(e,t,r){if(null==e)throw new Error("area is required");if(!(e>=0))throw new Error("area must be a positive number");var n=h[t||"meters"];if(!n)throw new Error("invalid original units");var o=h[r||"kilometers"];if(!o)throw new Error("invalid final units");return e/n*o},round:function(e,t){if(null==e||isNaN(e))throw new Error("num is required");if(t&&!(t>=0))throw new Error("precision must be a positive number");var r=Math.pow(10,t||0);return Math.round(e*r)/r},isNumber:m}},"./node_modules/@turf/polygon-to-linestring/node_modules/@turf/invariant/index.js":function(e,t){function r(e){if(!e)throw new Error("obj is required");var t;if(e.length?t=e:e.coordinates?t=e.coordinates:e.geometry&&e.geometry.coordinates&&(t=e.geometry.coordinates),t)return n(t),t;throw new Error("No valid coordinates")}function n(e){if(e.length>1&&"number"==typeof e[0]&&"number"==typeof e[1])return!0;if(Array.isArray(e[0])&&e[0].length)return n(e[0]);throw new Error("coordinates must only contain numbers")}function o(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}e.exports={geojsonType:function(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)},collectionOf:function(e,t,r){if(!e)throw new Error("No featureCollection passed");if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(var n=0;n<e.features.length;n++){var o=e.features[n];if(!o||"Feature"!==o.type||!o.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!o.geometry||o.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+o.geometry.type)}},featureOf:function(e,t,r){if(!e)throw new Error("No feature passed");if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)},getCoord:function(e){if(!e)throw new Error("obj is required");var t=r(e);if(t.length>1&&"number"==typeof t[0]&&"number"==typeof t[1])return t;throw new Error("Coordinate is not a valid Point")},getCoords:r,containsNumber:n,getGeom:o,getGeomType:function(e){if(!e)throw new Error("geojson is required");var t=o(e);if(t)return t.type}}},"./node_modules/geojson-equality/index.js":function(e,t,r){var n=r("./node_modules/deep-equal/index.js"),o=function(e){this.precision=e&&e.precision?e.precision:17,this.direction=!(!e||!e.direction)&&e.direction,this.pseudoNode=!(!e||!e.pseudoNode)&&e.pseudoNode,this.objectComparator=e&&e.objectComparator?e.objectComparator:s};function i(e){return e.coordinates.map((function(t){return{type:e.type.replace("Multi",""),coordinates:t}}))}function a(e,t){return e.hasOwnProperty("coordinates")?e.coordinates.length===t.coordinates.length:e.length===t.length}function s(e,t){return n(e,t,{strict:!0})}o.prototype.compare=function(e,t){if(e.type!==t.type||!a(e,t))return!1;switch(e.type){case"Point":return this.compareCoord(e.coordinates,t.coordinates);case"LineString":return this.compareLine(e.coordinates,t.coordinates,0,!1);case"Polygon":return this.comparePolygon(e,t);case"Feature":return this.compareFeature(e,t);default:if(0===e.type.indexOf("Multi")){var r=this,n=i(e),o=i(t);return n.every((function(e){return this.some((function(t){return r.compare(e,t)}))}),o)}}return!1},o.prototype.compareCoord=function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(e[r].toFixed(this.precision)!==t[r].toFixed(this.precision))return!1;return!0},o.prototype.compareLine=function(e,t,r,n){if(!a(e,t))return!1;var o=this.pseudoNode?e:this.removePseudo(e),i=this.pseudoNode?t:this.removePseudo(t);if(!n||this.compareCoord(o[0],i[0])||(i=this.fixStartIndex(i,o))){var s=this.compareCoord(o[r],i[r]);return this.direction||s?this.comparePath(o,i):!!this.compareCoord(o[r],i[i.length-(1+r)])&&this.comparePath(o.slice().reverse(),i)}},o.prototype.fixStartIndex=function(e,t){for(var r,n=-1,o=0;o<e.length;o++)if(this.compareCoord(e[o],t[0])){n=o;break}return n>=0&&(r=[].concat(e.slice(n,e.length),e.slice(1,n+1))),r},o.prototype.comparePath=function(e,t){var r=this;return e.every((function(e,t){return r.compareCoord(e,this[t])}),t)},o.prototype.comparePolygon=function(e,t){if(this.compareLine(e.coordinates[0],t.coordinates[0],1,!0)){var r=e.coordinates.slice(1,e.coordinates.length),n=t.coordinates.slice(1,t.coordinates.length),o=this;return r.every((function(e){return this.some((function(t){return o.compareLine(e,t,1,!0)}))}),n)}return!1},o.prototype.compareFeature=function(e,t){return!(e.id!==t.id||!this.objectComparator(e.properties,t.properties)||!this.compareBBox(e,t))&&this.compare(e.geometry,t.geometry)},o.prototype.compareBBox=function(e,t){return!!(!e.bbox&&!t.bbox||e.bbox&&t.bbox&&this.compareCoord(e.bbox,t.bbox))},o.prototype.removePseudo=function(e){return e},e.exports=o},"./node_modules/node-geo-distance/index.js":function(e,t){Number.prototype.toRad=function(){return this*Math.PI/180},t.vincenty=function(e,t,r){var n,o=6378137,i=6356752.314245,a=1/298.257223563,s=e.latitude,u=e.longitude,c=t.latitude,h=(t.longitude-u).toRad(),l=Math.atan((1-a)*Math.tan(s.toRad())),f=Math.atan((1-a)*Math.tan(c.toRad())),d=Math.sin(l),m=Math.cos(l),p=Math.sin(f),g=Math.cos(f),y=h,w=100;do{var b=Math.sin(y),v=Math.cos(y),x=Math.sqrt(g*b*(g*b)+(m*p-d*g*v)*(m*p-d*g*v));0==x&&r(0);var M=d*p+m*g*v,E=Math.atan2(x,M),j=m*g*b/x,O=1-j*j,_=M-2*d*p/O;isNaN(_)&&(_=0);var P=a/16*O*(4+a*(4-3*O));n=y,y=h+(1-P)*a*j*(E+P*x*(_+P*M*(2*_*_-1)))}while(Math.abs(y-n)>1e-12&&--w>0);0==w&&r(NaN);var S=O*(o*o-i*i)/(i*i),q=S/1024*(256+S*(S*(74-47*S)-128)),B=i*(1+S/16384*(4096+S*(S*(320-175*S)-768)))*(E-q*x*(_+q/4*(M*(2*_*_-1)-q/6*_*(4*x*x-3)*(4*_*_-3))));r(B=B.toFixed(3))},t.vincentySync=function(e,t){var r,n=6378137,o=6356752.314245,i=1/298.257223563,a=e.latitude,s=e.longitude,u=t.latitude,c=(t.longitude-s).toRad(),h=Math.atan((1-i)*Math.tan(a.toRad())),l=Math.atan((1-i)*Math.tan(u.toRad())),f=Math.sin(h),d=Math.cos(h),m=Math.sin(l),p=Math.cos(l),g=c,y=100;do{var w=Math.sin(g),b=Math.cos(g),v=Math.sqrt(p*w*(p*w)+(d*m-f*p*b)*(d*m-f*p*b));if(0==v)return 0;var x=f*m+d*p*b,M=Math.atan2(v,x),E=d*p*w/v,j=1-E*E,O=x-2*f*m/j;isNaN(O)&&(O=0);var _=i/16*j*(4+i*(4-3*j));r=g,g=c+(1-_)*i*E*(M+_*v*(O+_*x*(2*O*O-1)))}while(Math.abs(g-r)>1e-12&&--y>0);if(0==y)return NaN;var P=j*(n*n-o*o)/(o*o),S=P/1024*(256+P*(P*(74-47*P)-128)),q=o*(1+P/16384*(4096+P*(P*(320-175*P)-768)))*(M-S*v*(O+S/4*(x*(2*O*O-1)-S/6*O*(4*v*v-3)*(4*O*O-3))));return q=q.toFixed(3)},t.haversine=function(e,t,r){var n=e.latitude,o=e.longitude,i=t.latitude,a=t.longitude,s=(i-n).toRad(),u=(a-o).toRad(),c=Math.sin(s/2)*Math.sin(s/2)+Math.cos(n.toRad())*Math.cos(i.toRad())*Math.sin(u/2)*Math.sin(u/2);return r((1e3*(6371*(2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c))))).toFixed(3))},t.haversineSync=function(e,t){var r=e.latitude,n=e.longitude,o=t.latitude,i=t.longitude,a=(o-r).toRad(),s=(i-n).toRad(),u=Math.sin(a/2)*Math.sin(a/2)+Math.cos(r.toRad())*Math.cos(o.toRad())*Math.sin(s/2)*Math.sin(s/2);return(1e3*(6371*(2*Math.atan2(Math.sqrt(u),Math.sqrt(1-u))))).toFixed(3)}},"./node_modules/turf-point/index.js":function(e,t){var r=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};e.exports=function(e,t){if(!r(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return{type:"Feature",geometry:{type:"Point",coordinates:e},properties:t||{}}}}}]);